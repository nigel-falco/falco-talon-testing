customRules:
  custom-rules.yaml: |-
    - rule: Outbound Connection to C2 Servers
      desc: Detect outbound connection to command & control servers thanks to a list of IP addresses & a list of FQDN.
      condition: outbound and fd.sip in (c2_server_ip_list)
      output: Outbound connection to C2 server (c2_domain=%fd.sip.name c2_addr=%fd.sip c2_port=%fd.sport command=%proc.cmdline connection=%fd.name user=%user.name user_loginuid=%user.loginuid container_id=%container.id image=%container.image.repository)
      priority: WARNING
      tags: [host, container, network, mitre_command_and_control, TA0011]
    - macro: outbound
      condition: >
        (((evt.type = connect and evt.dir=<) or
          (evt.type in (sendto,sendmsg) and evt.dir=< and
          fd.l4proto != tcp and fd.connected=false and fd.name_changed=true)) and
        (fd.typechar = 4 or fd.typechar = 6) and
        (fd.ip != "0.0.0.0" and fd.net != "127.0.0.0/8" and not fd.snet in (rfc_1918_addresses)) and
        (evt.rawres >= 0 or evt.res = EINPROGRESS))
    - macro: proc_name_exists
      condition: (proc.name!="<NA>" and proc.name!="" and proc.name exists)    
    - list: c2_server_ip_list
      items:
        - "'52.21.188.179'"
        - "'54.237.103.220'"
    - list: rfc_1918_addresses
      items: ['"10.0.0.0/8"', '"172.16.0.0/12"', '"192.168.0.0/16"']
    - list: falco_containers
      items: ["docker.io/issif/falco-talon"]
    - rule: eBPF Program Loaded into Kernel
      desc: >-
        This rule detects the runtime loading of an eBPF program into the kernel.
        eBPF programs are extremely powerful, and as long as they conform to the
        constraints imposed by the eBPF verifier (ex: they don't cause a kernel
        panic), give near-arbitrary control over a target system.
      condition: evt.type=bpf and evt.dir=> and evt.arg.cmd=5 and proc_name_exists
      output: >-
        eBPF Program Detected being loaded into the Kernel. Please investigate.
        (proc.name=%proc.name proc.cmdline=%proc.cmdline connection=%fd.name
        user.name=%user.name user.loginuid=%user.loginuid container.id=%container.id
        evt.type=%evt.type proc.pid=%proc.pid proc.cwd=%proc.cwd
        proc.pname=%proc.pname gparent=%proc.aname[2] ggparent=%proc.aname[3]
        gggparent=%proc.aname[4] proc.ppid=%proc.ppid proc.pcmdline=%proc.pcmdline
        proc.sid=%proc.sid proc.exepath=%proc.exepath user.uid=%user.uid
        user.loginname=%user.loginname group.gid=%group.gid group.name=%group.name
        container.name=%container.name image=%container.image.repository)
      priority: CRITICAL
      tags:
        - host
        - container
        - MITRE
        - MITRE_TA0005_defense_evasion
        - MITRE_TA0003_persistence
      exceptions:
        - name: container_image_in
          comps: in
          fields: container.image.repository
          values:
            - sysdig_commercial_images
            - quay.io/cilium/cilium
            - quay.io/kubescape/sneeffer
            - registry.luntry.com/luntry/sensor-rs
            - docker.io/aquasec/tracee
            - quay.io/groundcover/caretta
        - name: image_suffix
          comps:
            - endswith
          fields:
            - container.image.repository
          values:
            - - calico/node
            - - tigera/cnx-node
            - - amazonaws.com/aws-guardduty-agent
            - - traceableai/ebpf-tracer
            - - granulate/gprofiler
            - - cilium/cilium
            - - /datadoghq/agent
            - - /grafana/beyla
            - - docker/ucp-calico-node
            - - /sustainable_computing_io/kepler
            - - /isovalent/cilium
            - - /aquasec/tracee
            - - /amazon/aws-network-policy-agent
